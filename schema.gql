# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input CreateOrUpdatePageInput {
  title: String!
  notebook: String!
  tags: [String!]
  notes: [NewPageNoteInput!]!
}

input CursorPaginationInput {
  take: Int = 10
  after: ID
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input FindTagsInput {
  pageSize: Int = 10
  current: Int = 1
  search: String
  sortBy: SortTagsBy = PageUpdatedAt
  sortOrder: SortOrder = Descending
}

type Mutation {
  deletePage(id: String!): String!
  createOrUpdatePage(id: String, page: CreateOrUpdatePageInput!): PageType
  renameNotebook(name: String!, id: String!): String!
  createNotebook(name: String!): NotebookType!
  deleteNotebook(id: String!): String!
}

input NewNoteSnippetInput {
  language: String
  code: String
  htmlCode: String
}

input NewPageNoteInput {
  _id: String
  header: String!
  subheader: String
  content: String
  plainTextContent: String
  htmlContent: String
  snippet: NewNoteSnippetInput
  createdAt: DateTime
  updatedAt: DateTime
}

type NotebookType {
  _id: ID!
  name: String!
  pages: [PageType!]
  pageCount: Float
  createdAt: DateTime!
  updatedAt: DateTime
}

input NoteSearch {
  search: String
  code: Boolean
  content: Boolean
  header: Boolean
  subheader: Boolean
}

type NoteSnippetType {
  language: String
  code: String
  htmlCode: String
}

type NoteType {
  _id: String
  header: String!
  subheader: String
  content: String
  plainTextContent: String
  htmlContent: String
  snippet: NoteSnippetType
  createdAt: DateTime!
  updatedAt: DateTime
}

input OffsetPaginationInput {
  pageSize: Int = 10
  current: Int = 1
}

type PageNotebookType {
  _id: ID!
  name: String!
}

input PageSearch {
  search: String
  title: Boolean
}

input PagesInput {
  pageSize: Int = 10
  current: Int = 1
  pageSearch: PageSearch
  noteSearch: NoteSearch
  notebook: String
  tags: [String!]
  language: String
  sortBy: SortPagesBy = PageUpdatedAt
  sortOrder: SortOrder = Descending
}

type PagesResult {
  pages: [PageType!]!
  hasMore: Boolean!
  current: Float!
}

type PageType {
  _id: ID!
  title: String!
  notebook: PageNotebookType!
  tags: [String!]
  notes: [NoteType!]!
  createdAt: DateTime!
  updatedAt: DateTime
}

type Query {
  page(id: String!): PageType
  pages(options: PagesInput): PagesResult
  notebooks(sort: Int = 1, name: String): [NotebookType!]
  getTag(tag: String!): TagsType
  findTags(options: FindTagsInput): [TagsType!]
  allLanguages: [String!]!
}

enum SortOrder {
  Ascending
  Descending
}

enum SortPagesBy {
  PageUpdatedAt
  PageCreatedAt
}

enum SortTagsBy {
  PageUpdatedAt
  PageCreatedAt
}

type TagsType {
  tag: String!
  pages: [PageType!]!
}
